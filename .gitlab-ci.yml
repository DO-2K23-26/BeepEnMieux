stages:
  - build
  - test
  - store
  - documentation
  - deploy

variables:
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG

Buid image:
  tags:
    - shell
  stage: build
  script:
    - docker build --cache-from $IMAGE_TAG -t $IMAGE_TAG .
  cache:
    key: ${CI_PIPELINE_ID}
    paths:
      - node_modules/

Static Code Analysis:
  tags:
    - docker
  image: node:latest
  stage: test
  script:
    - npm install
    - npm run lint-no-fix
  needs:
    - Buid image

Dependency Security Scan:
  stage: test
  image: node:latest
  tags:
    - docker
  script:
    - npm install
    - npm audit
  needs:
    - Buid image

Store image:
  tags:
    - shell
  stage: store
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker tag $IMAGE_TAG ${CI_REGISTRY_IMAGE}:latest
    - docker tag $IMAGE_TAG ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}
    - docker push ${CI_REGISTRY_IMAGE}:latest
    - docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}
  only:
    - main
  needs:
    - Dependency Security Scan
    - Static Code Analysis

pages:
  tags:
    - docker
  stage: documentation
  image: node:latest
  script:
    - npm install
    - npm run docs
  artifacts:
    paths:
      - public
  only:
    - main
  needs:
  - Dependency Security Scan
  - Static Code Analysis

Deploy to Production:
  tags:
    - docker
  image: ilyasemenov/gitlab-ci-git-push
  stage: deploy
  when: manual
  environment:
    name: production
    url: http://localhost:9644
  only:
    - main
  script:
    - git-push ssh://dokku@162.38.112.145:22/beepenmieux
  needs:
    - Dependency Security Scan
    - Static Code Analysis
