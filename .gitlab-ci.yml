stages:
  - build
  - test
  - store
  - documentation

variables:
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG

Buid image:
  tags:
    - shell
  stage: build
  script:
    - docker build --cache-from $IMAGE_TAG -t $IMAGE_TAG .
  cache:
    key: ${CI_PIPELINE_ID}
    paths:
      - node_modules/

Build helm chart:
  tags:
    - shell
  stage: build
  script:
    - helm lint helm/beepenmieux
    - helm package helm/beepenmieux
  artifacts:
    paths:
      - '*.tgz'

Static Code Analysis:
  tags:
    - docker
  image: node:latest
  stage: test
  script:
    - npm install
    - npm run lint-no-fix
  needs:
    - Buid image

Dependency Security Scan:
  stage: test
  image: node:latest
  tags:
    - docker
  script:
    - npm install
    - npm audit
  needs:
    - Buid image

Store docker image:
  tags:
    - shell
  stage: store
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker tag $IMAGE_TAG ${CI_REGISTRY_IMAGE}:dev
    - docker tag $IMAGE_TAG ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}
    - docker push ${CI_REGISTRY_IMAGE}:dev
    - docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}
  needs:
    - Buid image
    - Build helm chart
    - Static Code Analysis
    - Dependency Security Scan

Store helm chart:
  tags:
    - shell
  stage: store
  script:
    - 'curl --request POST --user gitlab-ci-token:$CI_JOB_TOKEN --form "chart=@beepenmieux-0.1.0.tgz" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/api/stable/charts"'
  needs:
    - Buid image
    - Build helm chart
    - Static Code Analysis
    - Dependency Security Scan

pages:
  tags:
    - docker
  stage: documentation
  image: node:latest
  script:
    - npm install
    - npm run docs
  artifacts:
    paths:
      - public
  only:
    - main
  needs:
    - Buid image
    - Build helm chart
    - Static Code Analysis
    - Dependency Security Scan
    - Store docker image
    - Store helm chart
