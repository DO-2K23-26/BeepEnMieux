// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int        @id @default(autoincrement())
  email            String     @unique
  nickname         String     @unique
  password         String
  socketId         String?
  messages         Message[]
  servers          Server[]   @relation("usersServer")
  serversOwned     Server[]   @relation("ownerServer")
  timedouts        TimedOut[]
  banned           Banned[]
}

model Channel {
  id         Int        @id @default(autoincrement())
  nom        String     @unique
  messages   Message[]
  timedouts  TimedOut[]
  server     Server     @relation(fields: [serverId], references: [id])
  serverId   Int
}

model Server {
  id         Int        @id @default(autoincrement())
  nom        String     @unique
  channels   Channel[]
  users      User[]     @relation("usersServer")
  owner      User       @relation("ownerServer", fields: [ownerId], references: [id])
  ownerId    Int
  banned     Banned[]   @relation("bannedServer")
}

model TimedOut {
  userId     Int
  channelId  Int
  date       DateTime @default(now())
  reason     String
  time       String
  user       User      @relation(fields: [userId], references: [id])
  channel    Channel   @relation(fields: [channelId], references: [id])
  @@id([userId, channelId])
}

model Banned {
  userId     Int
  serverId   Int
  date       DateTime @default(now())
  reason     String
  time       String
  user       User      @relation(fields: [userId], references: [id])
  server     Server    @relation("bannedServer", fields: [serverId], references: [id])
  @@id([userId, serverId])
}

model Message {
  id         Int      @id @default(autoincrement())
  contenu    String
  author     User     @relation(fields: [authorId], references: [id])
  authorId   Int
  channel    Channel  @relation(fields: [channelId], references: [id])
  channelId  Int
  timestamp  DateTime @default(now())
}
